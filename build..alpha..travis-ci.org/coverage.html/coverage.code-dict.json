{"/home/travis/build/npmtest/node-npmtest-zerorpc/test.js":"/* istanbul instrument in package npmtest_zerorpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zerorpc/lib.npmtest_zerorpc.js":"/* istanbul instrument in package npmtest_zerorpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_zerorpc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_zerorpc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-zerorpc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-zerorpc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_zerorpc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_zerorpc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_zerorpc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_zerorpc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_zerorpc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_zerorpc.__dirname + '/lib.npmtest_zerorpc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/index.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar server = require(\"./lib/server\"),\n    client = require(\"./lib/client\");\n\nexports.Server = server.Server;\nexports.Client = client.Client;","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/server.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar socket = require(\"./socket\"),\n    _ = require(\"underscore\"),\n    nodeUtil = require(\"util\"),\n    events = require(\"events\"),\n    util = require(\"./util\"),\n    middleware = require(\"./middleware\");\n\n// Heartbeat rate in ms\nvar DEFAULT_HEARTBEAT = 5000;\n\n//Gets the arguments associated with a function as an array\n//fun : Function\n//      The function to get the arguments from.\n//return : Array of Strings\n//      The function's arguments\nfunction getArguments(fun) {\n    var m1 = /^[\\s\\(]*function[^(]*\\(([^)]*)\\)/;\n    var m2 = /\\/\\/.*?[\\r\\n]|\\/\\*(?:.|[\\r\\n])*?\\*\\//g;\n    var m3 = /\\s+/g;\n\n    var names = fun.toString().match(m1)[1].replace(m2, '').replace(m3, '').split(',');\n    var args = names.length == 1 && !names[0] ? [] : names;\n\n    //Remove the last argument from the args becase it is the callback\n    args.pop();\n\n    return args;\n}\n\n//Extracts the public methods (and their arguments) of a context.\n//context : Object\n//      The object to be exposed\n//return : Object of String => Array\n//      A map where they key is the method name and the value are the method\n//      arguments, not including the callback argument.\nfunction publicMethods(context) {\n    var methods = {};\n\n    //Ignore members that start with an underscore or are not functions\n    for(var name in context) {\n        if(!/^_/.test(name) && typeof(context[name]) == 'function') {\n            methods[name] = getArguments(context[name]);\n        }\n    }\n\n    return methods;\n}\n\n// Creates a new server\n// context : Object\n//      The object to expose\nfunction Server(context, heartbeat) {\n    var self = this;\n    var heartbeat = heartbeat || DEFAULT_HEARTBEAT;\n\n\n    self._socket = socket.server(heartbeat);\n    util.eventProxy(self._socket, self, \"error\");\n\n    self._methods = publicMethods(context);\n\n    context._zerorpc_ping = function(reply) { reply(null, [\"pong\",\"\"]); };\n    self._methods._zerorpc_ping = [];\n\n    var newInspector = self._createIntrospector(context.constructor.name || \"Object\");\n\n    context._zerorpc_inspect = newInspector;\n    self._methods._zerorpc_inspect = getArguments(newInspector);\n\n    self._socket.on(\"multiplexing-socket/receive\", function(event) {\n        if(event.name in self._methods) self._recv(event, context);\n    });\n}\n\nnodeUtil.inherits(Server, events.EventEmitter);\n\n//Creates the new-school introspector\nServer.prototype._createIntrospector = function(contextName) {\n    var methods = {};\n    var results = { name: contextName, methods: methods };\n\n    for(var name in this._methods) {\n\t\tif (name.indexOf('_') === 0) {\n\t\t\tcontinue;\n\t\t}\n        methods[name] = {\n            doc: \"\",\n\n            args: _.map(this._methods[name], function(arg) {\n                return { name: arg };\n            })\n        };\n    }\n\n    return function(reply) {\n        reply(null, results);  \n    };\n}\n\n//Called when a method call event is received\n//event : Object\n//      The ZeroRPC event\n//context : Object\n//      The object to expose.\nServer.prototype._recv = function(event, context) {\n    var self = this;\n    var ch = self._socket.openChannel(event);\n    var isFirst = true;\n\n    //Sends an error\n    var sendError = function(error) {\n        var args = [error.name || \"Error\", error.message, error.stack];\n        ch.send(\"ERR\", args);\n        ch.close();\n    };\n\n    //Listen for protocol errors - this should never happen\n    ch.on(\"protocol-error\", function(error) {\n        self.emit(\"error\", error);\n    });\n\n    //Listen for heartbeat errors\n    ch.on(\"heartbeat-error\", function(error) {\n        self.emit(\"error\", error);\n    });\n\n    //This is passed to RPC methods to call when they finish, or have a stream\n    //update\n    var result = function(error, item, more) {\n        more = more || false;\n\n        if(error) {\n            //Create an error object if we were passed a string\n            sendError(typeof(error) == 'string' ? new Error(error) : error);\n        } else {\n            if(isFirst && !more) {\n                //Wrap item in an array for backwards compatibility issues\n                //with ZeroRPC\n                ch.send(\"OK\", [item]);\n            } else if(item !== undefined) {\n                //Stream is a newer method that does not require item to be\n                //wrapped in an array\n                ch.send(\"STREAM\", item);\n            }\n\n            if(!more) {\n                if(!isFirst) ch.send(\"STREAM_DONE\", []);\n                ch.close();\n            }\n        }\n        \n        isFirst = false;\n    };\n\n    //The arguments should be an array\n    if(!(event.args instanceof Array)) {\n        self.emit(\"error\", \"Invalid event: Bad args\");\n        return ch.close();\n    }\n\n    //Call the method\n    event.args.push(result);\n    \n    //Catch any errors and send them back to the client\n    try {\n        context[event.name].apply(context, event.args);\n    } catch(e) {\n        sendError(e);\n    }\n}\n\n//Binds to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nServer.prototype.bind = function(endpoint) {\n    this._socket.bind(endpoint);\n};\n\n//Connects to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nServer.prototype.connect = function(endpoint) {\n    this._socket.connect(endpoint);\n};\n\n//Closes the server\nServer.prototype.close = function() {\n    this._socket.close();\n};\n\nServer.prototype.closed = function() {\n\treturn this._socket.closed();\n};\n\nexports.Server = Server;\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/socket.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar nodeUtil = require(\"util\"),\n    zmq = require(\"zmq\"),\n    nodeEvents = require(\"events\"),\n    events = require(\"./events\"),\n    util = require(\"./util\"),\n    channel = require(\"./channel\");\n\n//The default channel capacity\nvar CHANNEL_CAPACITY = 100;\n\n//Creates a new socket\n//zmqSocket : Object\n//      The underlying ZeroMQ socket to use\nfunction Socket(zmqSocket) {\n    var self = this;\n    self._zmqSocket = zmqSocket;\n    util.eventProxy(self._zmqSocket, self, \"error\");\n\n    var error = function(message) {\n        self.emit(\"error\", message);\n    };\n\n    self._zmqSocket.on(\"message\", function() {\n        //Deserialize the object and perform some sanity checks\n        if(arguments[arguments.length - 2].length != 0) {\n            return error(\"Expected second to last argument to be an empty buffer, but it is not\");\n        }\n\n        var envelope = Array.prototype.slice.call(arguments, 0, arguments.length - 2);\n\n        try {\n            var event = events.deserialize(envelope, arguments[arguments.length - 1]);\n        } catch(e) {\n            return error(\"Invalid event: \" + e);\n        }\n\n        //Emit the event\n        self.emit(\"socket/receive\", event);\n    });\n}\n\nnodeUtil.inherits(Socket, nodeEvents.EventEmitter);\n\n//Sends a message on the socket\n//event : Object\n//      The ZeroRPC event to send\nSocket.prototype.send = function(event) {\n    var message = events.serialize(event);\n    this._zmqSocket.send.call(this._zmqSocket, message);\n};\n\n//Binds to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nSocket.prototype.bind = function(endpoint) {\n    this._zmqSocket.bindSync(endpoint);\n}\n\n//Connects to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nSocket.prototype.connect = function(endpoint) {\n    this._zmqSocket.connect(endpoint);\n}\n\n//Creates a new multiplexing socket\n//zmqSocket : Object\n//      The underlying ZeroMQ socket to use\nfunction MultiplexingSocket(zmqSocket, heartbeat) {\n    Socket.call(this, zmqSocket);\n    var self = this;\n\n    //Map of open channel IDs => channel objects\n    self.channels = {};\n    self._heartbeatInterval = heartbeat;\n\tself._closed = false;\n\n    //Route events to a channel if possible; otherwise emit the event\n    self.on(\"socket/receive\", function(event) {\n        var ch = self.channels[event.header.response_to || \"\"];\n\n        if(ch) {\n            ch.invoke(event);\n        } else {\n            self.emit(\"multiplexing-socket/receive\", event);\n        }\n    });\n}\n\nnodeUtil.inherits(MultiplexingSocket, Socket);\n\n//Opens a new channel\n//srcEvent : Object or null\n//      The ZeroRPC event that caused the channel to be opened, or null if\n//      this is a locally opened channel.\nMultiplexingSocket.prototype.openChannel = function(srcEvent) {\n    if(srcEvent) {\n        var ch = new channel.ServerChannel(srcEvent, this, CHANNEL_CAPACITY, this._heartbeatInterval);\n    } else {\n        var ch = new channel.ClientChannel(this, CHANNEL_CAPACITY, this._heartbeatInterval);\n    }\n\n    this.channels[ch.id] = ch;\n    return ch;\n};\n\n//Closes the socket\nMultiplexingSocket.prototype.close = function(linger) {\n\tif (this.closed()) {\n\t\tthrow Error(\"Socket already closed\");\n\t}\n    if (linger !== undefined) {\n        this._zmqSocket.setsockopt(zmq.options.linger, linger);\n    }\n\n    this._zmqSocket.close();\n    for(var id in this.channels) this.channels[id].destroy();\n\tthis._closed = true;\n};\n\nMultiplexingSocket.prototype.closed = function() {\n\treturn this._closed;\n};\n\nMultiplexingSocket.prototype.setTimeout = function(timeout) {\n};\n\n//Creates a new multiplexing socket server\nfunction server(heartbeat) {\n    return new MultiplexingSocket(zmq.socket(\"xrep\"), heartbeat);\n}\n\n//Creates a new multiplexing socket client\nfunction client(heartbeat) {\n    return new MultiplexingSocket(zmq.socket(\"xreq\"), heartbeat);\n}\n\nexports.server = server;\nexports.client = client;\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/buffer.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n//Creates a new channel buffer\n//capacity : number\n//      The capacity of the buffer\nfunction ChannelBuffer(capacity) {\n    //Pre-allocate the buffer array to its capacity and set the length to 0.\n    //This way, the length property is correct, but the array size equals\n    //the maximum buffer size, so it doesn't have to be resized (as much).\n    this._buffer = new Array(capacity);\n    this._buffer.length = 0;\n    this._capacity = capacity;\n}\n\n//Adds an item to the buffer\nChannelBuffer.prototype.add = function(item) {\n    this._buffer.push(item);\n};\n\n//Removes an item from the buffer\nChannelBuffer.prototype.remove = function() {\n    return this._buffer.shift();\n}\n\n//Gets the number of items in the buffer\nChannelBuffer.prototype.length = function() {\n    return this._buffer.length;\n};\n\n//Gets the channel capacity\nChannelBuffer.prototype.getCapacity = function() {\n    return this._capacity;\n}\n\n//Checks whether the buffer has capacity\nChannelBuffer.prototype.hasCapacity = function() {\n    return this._capacity > 0;\n};\n\n//Updates the capacity\nChannelBuffer.prototype.setCapacity = function(capacity) {\n    this._capacity = capacity;\n};\n\n//Decrements the capacity\nChannelBuffer.prototype.decrementCapacity = function() {\n    this._capacity--;\n};\n\nexports.ChannelBuffer = ChannelBuffer;","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/channel.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar util = require(\"./util\"),\n    nodeUtil = require(\"util\"),\n    nodeEvents = require(\"events\"),\n    events = require(\"./events\"),\n    buffer = require(\"./buffer\");\n\n//The channel state when it is open\nvar CHANNEL_OPEN = \"open\";\n\n//The channel state when it is closing\nvar CHANNEL_CLOSING = \"closing\";\n\n//The channel state when it is closed\nvar CHANNEL_CLOSED = \"closed\";\n\n//Current verison of the protocol\nvar PROTOCOL_VERSION = 3;\n\n\n//Creates a new channel\n//id : String\n//      The channel ID\n//envelope : Array of Buffers\n//      The ZeroMQ envelope of the remote endpoint that caused the channel to\n//      be opened\n//socket : MultiplexingSocket\n//      The socket that opened the channel\n//capacity : Number\n//      The channel buffer's capacity\n//heartbeatInterval: Number\n//      The heartbeat interval in ms\nfunction Channel(id, envelope, socket, capacity, heartbeatInterval) {\n    this.id                 = id;\n    this._state             = CHANNEL_OPEN;\n    this._envelope          = envelope;\n    this._socket            = socket;\n    this._capacity          = capacity;\n    this._heartbeatInterval = heartbeatInterval\n\n    //Setup heartbeating on the channel\n    this._resetHeartbeat();\n    this._heartbeatRunner = this._runHeartbeat();\n\n    //Callbacks to call when the channel receives a message\n    this._callbacks = [];\n\n    //Buffers for sending & receiving messages\n    this._inBuffer = new buffer.ChannelBuffer(capacity);\n    this._inBuffer.setCapacity(1);\n    this._outBuffer = new buffer.ChannelBuffer(1);\n}\n\nnodeUtil.inherits(Channel, nodeEvents.EventEmitter);\n\n//Registers a new callback to be run when this channel receives a message\n//callback : Function(event : Object, next : Function)\n//      The callback to execute when a new event is received. Unless the\n//      callback is the last in the chain, it should call its next argument\n//      when its work is complete, so that the next callback can be run.\nChannel.prototype.register = function(callback) {\n    this._callbacks.push(callback);\n};\n\n//Called when the channel receives an event\n//event : Object\n//      The ZeroRPC event received\nChannel.prototype.invoke = function(event) {\n    var self = this;\n\n    if(event.name == \"_zpc_more\") {\n        //Update buffer data\n        if(event.args.length > 0 && typeof(event.args[0]) == \"number\") {\n            self._outBuffer.setCapacity(event.args[0]);\n            self.flush();\n        } else {\n            self.emit(\"protocol-error\", \"Invalid event: Bad buffer message\");\n            self.destroy();\n        }\n    } else if(event.name == \"_zpc_hb\") {\n        self._resetHeartbeat();\n    } else if(self._state == CHANNEL_OPEN) {\n        //Enqueue the message in the buffer\n        self._inBuffer.add(event);\n        self._inBuffer.decrementCapacity();\n\n        //Call each callback one at a time, similar to connect middleware.\n        //This is done asyncronously to take advantage of the buffer.\n        setTimeout(function() {\n            var event = self._inBuffer.remove();\n            var i = -1;\n\n            //Update the remote process with how much open capacity we have in\n            //our buffer - but only if the event is not one that is going to\n            //close the channel; otherwise we'll send a _zpc_more event, and\n            //the server won't know how to route it\n            if(event.name === \"STREAM\" && self._inBuffer.getCapacity() < self._capacity / 2) {\n                self._resetCapacity();\n            }\n\n            var next = function() { \n                i++;\n\n                if(i < self._callbacks.length) {\n                    self._callbacks[i].call(self, event, next);\n                }\n            };\n\n            next();\n        }, 0);\n    }\n};\n\n//Puts the channel in the closing state\nChannel.prototype.close = function() {\n    this._state = CHANNEL_CLOSING;\n    this.emit(\"closing\");\n    this.flush();\n};\n\n//Close and destroy channel\nChannel.prototype.destroy = function() {\n    this._state = CHANNEL_CLOSED;\n    this.emit(\"closed\");\n    clearTimeout(this._heartbeatRunner);\n    delete this._socket.channels[this.id];\n}\n\n//Sends as many outbound messages as possible\nChannel.prototype.flush = function() {\n    while(this._outBuffer.length() > 0 && this._outBuffer.hasCapacity()) {\n        this._socket.send(this._outBuffer.remove());\n        this._outBuffer.decrementCapacity();\n    }\n\n    if(this._state == CHANNEL_CLOSING && this._outBuffer.length() == 0) {\n        this.destroy();\n    }\n};\n\n//Sends a message\n//name : String\n//      The event name\n//args : Array\n//      The event arguments\nChannel.prototype.send = function(name, args) {\n    if(this._state != CHANNEL_OPEN) {\n        throw new Error(\"Cannot send on closed channel\");\n    }\n\n    //Create & enqueue the event\n    var event = events.create(this._envelope, this._createHeader(), name, args);\n\n    //Send the message or enqueue it to be sent later\n    if(this._outBuffer.hasCapacity()) {\n        this._socket.send(event);\n        this._outBuffer.decrementCapacity();\n    } else {\n        this._outBuffer.add(event);\n    }\n};\n\n//Creates a header for an event\nChannel.prototype._createHeader = function() {\n    return { v: PROTOCOL_VERSION, message_id: events.fastUUID(), response_to: this.id };\n};\n\n//Runs the heartbeat on this channel\nChannel.prototype._runHeartbeat = function() {\n    var self = this;\n\n    return setInterval(function() {\n        if(util.curTime() > self._heartbeatExpirationTime) {\n            //If we haven't received a response in 2 * heartbeat rate, send an\n            //error\n            self.emit(\"heartbeat-error\", \"Lost remote after \" + (self._heartbeatInterval * 2) + \"ms\");\n            self.destroy();\n\t\t\treturn;\n        }\n        \n        //Heartbeat on the channel\n        try {\n            var event = events.create(self._envelope, self._createHeader(), \"_zpc_hb\", [0]);\n            self._socket.send(event);\n        } catch(e) {\n            console.error(\"Error occurred while sending heartbeat:\", e);\n        }\n    }, self._heartbeatInterval);\n};\n\n//Resets the heartbeat expiration time\nChannel.prototype._resetHeartbeat = function() {\n    this._heartbeatExpirationTime = util.curTime() + this._heartbeatInterval * 2;\n};\n\n//Updates the capacity and sends a _zpc_more event\nChannel.prototype._resetCapacity = function() {\n    var newCapacity = this._capacity - this._inBuffer.length();\n    \n    if(newCapacity > 0) {\n        this._inBuffer.setCapacity(newCapacity);\n        var event = events.create(this._envelope, this._createHeader(), \"_zpc_more\", [newCapacity]);\n        this._socket.send(event);\n    }\n};\n\n//Creates a new server-side channel\n//srcEvent : Object\n//      The event that caused this channel to be opened\n//socket : Object\n//      The multiplexing socket instance that opened this channel\n//capacity : Number\n//      The capacity of the socket's input buffer\n//heartbeatInterval: Number\n//      The heartbeat interval in ms\nfunction ServerChannel(srcEvent, socket, capacity, heartbeatInterval) {\n    Channel.call(this, srcEvent.header.message_id, srcEvent.envelope, socket, capacity, heartbeatInterval);\n}\n\nnodeUtil.inherits(ServerChannel, Channel);\n\n//Creates a new client-side buffer\n//socket : Object\n//      The multiplexing socket instance that opened this channel\n//capacity : Number\n//      The capacity of the socket's input buffer\n//heartbeatInterval: Number\n//      The heartbeat interval in ms\nfunction ClientChannel(socket, capacity, heartbeatInterval) {\n    Channel.call(this, events.fastUUID(), null, socket, capacity, heartbeatInterval);\n    this._fresh = true;\n    \n}\n\nnodeUtil.inherits(ClientChannel, Channel);\n\nClientChannel.prototype._createHeader = function(name, args) {\n    if(this._fresh) {\n        this._fresh = false;\n        return { v: PROTOCOL_VERSION, message_id: this.id };\n    } else {\n        return Channel.prototype._createHeader.call(this);\n    }\n}\n\nexports.ServerChannel = ServerChannel;\nexports.ClientChannel = ClientChannel;\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/util.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n//Proxies event from one object to another\n//from : EventEmitter\n//      The object to proxy events from\n//to : EventEmitter\n//      The object to proxy events to\nfunction eventProxy(from, to, name) {\n    from.on(name, function() {\n        var args = Array.prototype.slice.call(arguments);\n        args.unshift(name);\n        to.emit.apply(to, args);\n    });\n}\n\n//Gets the current time in milliseconds since epoch\n//return : Number\nfunction curTime() {\n    return Date.now();\n}\n\n//Creates an error object\n//name : String\n//      The error name\n//message : String\n//      The error message\n//traceback : String\n//      The exception stack trace as a string\n//return : Object\n//      An error object\nfunction createErrorResponse(name, message, stack) {\n\tvar e = Error(message);\n\te.name = name;\n\tif (stack !== undefined) {\n\t\te.stack = stack;\n\t}\n\treturn e;\n}\n\nexports.eventProxy = eventProxy;\nexports.curTime = curTime;\nexports.createErrorResponse = createErrorResponse;\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/events.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar msgpack = require(\"msgpack\"),\n    uuid = require(\"uuid\");\n\n//Serializes an event into an array of buffers that can be transmitted\n//through ZeroMQ.\n//event : Object\n//      The event to serialize\n//return : Array of Buffers\n//      The message to transmit across ZeroMQ\nfunction serialize(event) {\n    var payload = [event.header, event.name, event.args];\n    var message = [];\n\n    if(event.envelope) {\n        message = message.concat(event.envelope);\n    }\n\n    message.push(new Buffer(0));\n    message.push(msgpack.pack(payload));\n    return message;\n}\n\n//Deserializes an event into an object.\n//envelope : Array of Buffer\n//      The ZeroMQ envelope\n//payload : Buffer\n//      The buffer containing the ZeroRPC event\n//return : Object\n//      The deserialized object\nfunction deserialize(envelope, payload) {\n    var event = msgpack.unpack(arguments[arguments.length - 1]);\n\n    if(!(event instanceof Array) || event.length != 3) {\n        throw new Error(\"Expected array of size 3\");\n    } else if(!(event[0] instanceof Object) || !event[0].message_id) {\n        throw new Error(\"Bad header\");\n    } else if(typeof(event[1]) != 'string') {\n        throw new Error(\"Bad name\");\n    }\n\n    return create(envelope, event[0], event[1], event[2]);\n}\n\n//Creates a new event\n//envelope : Array of Buffers\n//      The ZeroMQ envelope\n//header : Object\n//      The ZeroRPC header\n//name : String\n//      The ZeroRPC event name\n//args : Array\n//      The ZeroRPC event arguments\n//return : Object\n//      A ZeroRPC object\nfunction create(envelope, header, name, args) {\n    return {\n        envelope: envelope,\n        header: header,\n        name: name,\n        args: args\n    };\n}\n\nvar uuidBase = uuid.v4().substring(0, 24);\nvar uuidCounter = 0;\n\nfunction fastUUID() {\n    var counter = uuidCounter++;\n    //Just in the case user sends over 281 trillion messages?\n    if(uuidCounter > 0xFFFFFFFFFFFF) uuidCounter = 0;\n    return uuidBase + (\"000000000000\" + counter.toString(16)).slice(-12);\n}\n\nexports.serialize = serialize;\nexports.deserialize = deserialize;\nexports.create = create;\nexports.fastUUID = fastUUID;","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/client.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar socket = require(\"./socket\"),\n    _ = require(\"underscore\"),\n    nodeUtil = require(\"util\"),\n    events = require(\"events\"),\n    util = require(\"./util\"),\n    middleware = require(\"./middleware\");\n\nvar DEFAULT_TIMEOUT = 30;\n\n//Heartbeat rate in milliseconds\nvar DEFAULT_HEARTBEAT = 5000;\n\n// Creates a new client\n// options : Object\n//      Options associated with the client. Allowed options:\n//      * timeout (number): Seconds to wait for a response before it is\n//        considered timed out (default 30s)\n//      * heartbeatInterval (number): The heartbeat interval in ms.\n//        (default 5000ms)\nfunction Client(options) {\n    options = options || {};\n    var heartbeat = options.heartbeatInterval || DEFAULT_HEARTBEAT;\n    this._timeout = options.timeout || DEFAULT_TIMEOUT;\n\tthis._socket = socket.client(heartbeat);\n\n\tutil.eventProxy(this._socket, this, \"error\");\n}\n\nnodeUtil.inherits(Client, events.EventEmitter);\n\n//Binds to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nClient.prototype.bind = function(endpoint) {\n    this._socket.bind(endpoint);\n};\n\n//Connects to a ZeroMQ endpoint\n//endpoint : String\n//      The ZeroMQ endpoint\nClient.prototype.connect = function(endpoint) {\n    this._socket.connect(endpoint);\n};\n\n//Closes the client\nClient.prototype.close = function(linger) {\n    this._socket.close(linger);\n};\n\nClient.prototype.closed = function() {\n    return this._socket.closed();\n};\n\n//Calls a remote method\n//options: Object\n//      Optional options object to override the constructor options (currently only timeout)\n//method : String\n//      The method name\n//args... : Varargs\n//      The arguments to send with the invocation\n//callback : Function\n//      The callback to call on an update\nClient.prototype.invoke = function(/*options, */method /*, args..., callback*/) {\n    var self = this;\n    var hasCallback = typeof arguments[arguments.length - 1] == 'function';\n    var callback = hasCallback ? arguments[arguments.length - 1] : function() {};\n    var options = typeof method === 'object' ?\n        method :\n        undefined;\n    var offset = 1;\n    if (options === method) {\n        method = arguments[1];\n        offset = 2;\n    }\n    var args = Array.prototype.slice.call(arguments, offset,\n            hasCallback ? arguments.length - 1 : arguments.length);\n\n    var alreadyCalled = false;\n\n    var callbackErrorWrapper = function(error) {\n        if(alreadyCalled === false) {\n            callback(error, undefined, false);\n            alreadyCalled = true;\n        }\n    };\n\n    var ch = self._socket.openChannel();\n    var timeout = parseInt(options && options.timeout, 10) || self._timeout;\n    middleware.addTimeout(timeout * 1000, ch, callbackErrorWrapper);\n\n    //Associated callbacks to execute for various events\n    var handlers = {\n        \"ERR\": function(event) {\n            if(!(event.args instanceof Array) || event.args.length != 3) {\n                return self.emit(\"error\", \"Invalid event: Bad error\");\n            }\n\n            var error = util.createErrorResponse(event.args[0], event.args[1], event.args[2]);\n            callbackErrorWrapper(error);\n            ch.close();\n        },\n\n        \"OK\": function(event) {\n            callback(undefined, event.args[0], false);\n            ch.close();\n        },\n\n        \"STREAM\": function(event) {\n            callback(undefined, event.args, true);\n        },\n\n        \"STREAM_DONE\": function() {\n            callback(undefined, undefined, false);\n            ch.close();\n        }\n    };\n\n    ch.register(function(event) {\n        var handler = handlers[event.name];\n\n        if(handler) {\n            handler(event);\n        } else {\n            //Send an error if the server sent a bad event - this should\n            //never happen\n            var error = util.createErrorResponse(\"ProtocolError\", \"Invalid event: Unknown event name\");\n            callbackErrorWrapper(error);\n            ch.close();\n        }\n    });\n\n    //Listen for protocol errors - this should never happen\n    ch.on(\"protocol-error\", function(error) {\n        var error = util.createErrorResponse(\"ProtocolError\", error);\n        callbackErrorWrapper(error);\n    });\n\n    //Listen for heartbeat errors\n    ch.on(\"heartbeat-error\", function(error) {\n        var error = util.createErrorResponse(\"HeartbeatError\", error);\n        callbackErrorWrapper(error);\n    });\n\n    ch.send(method, args);\n};\n\nexports.Client = Client;\n","/home/travis/build/npmtest/node-npmtest-zerorpc/node_modules/zerorpc/lib/middleware.js":"// Open Source Initiative OSI - The MIT License (MIT):Licensing\n//\n// The MIT License (MIT)\n// Copyright (c) 2015 François-Xavier Bourlet (bombela+zerorpc@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\nvar util = require(\"./util\");\n\n//Adds a timeout on a channel - if a response isn't received within a certain\n//amount of time, we execute the callback with a timeout error.\nfunction addTimeout(timeout, channel, callback) {\n    var runner = setTimeout(function() {\n        var error = util.createErrorResponse(\"TimeoutExpired\", \"Timeout after \" + timeout + \"ms\");\n        callback(error);\n        channel.close();\n    }, timeout);\n\n    channel.register(function(event, next) {\n        clearTimeout(runner);\n        next();\n    });\n\n    //Clear the timeout when the channel is closed\n    channel.on(\"closed\", function() {\n        clearTimeout(runner);\n    });\n}\n\nexports.addTimeout = addTimeout;\n"}